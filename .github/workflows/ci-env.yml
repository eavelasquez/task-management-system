name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PORT: 3000
  MONGODB_URI: mongodb://localhost:27017/task-management-system-test
  DOCKER_IMAGE_NAME: task-management-system

jobs:
  # Build Matrix Testing (Travis CI feature)
  test:
    name: Test on Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20, 22]
        mongodb-version: [7.0, 6.0]

    services:
      mongodb:
        image: mongo:${{ matrix.mongodb-version }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Create logs directory
        run: mkdir -p logs

      - name: Install dependencies
        run: npm ci

      - name: Wait for MongoDB
        run: |
          timeout 60 bash -c 'until mongosh --eval "db.adminCommand({ping: 1})" > /dev/null 2>&1; do sleep 1; done'

      - name: Run linter
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm test
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          MONGODB_URI: ${{ env.MONGODB_URI }}
          NODE_ENV: test
        continue-on-error: true # Since tests are placeholders

      - name: Generate test coverage
        run: npm run test:coverage
        continue-on-error: true # Since it's a placeholder

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 22 # Only upload once
        continue-on-error: true

  # Security and Quality Checks (Jenkins feature)
  security:
    name: Security & Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Scan for vulnerabilities
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'security-scan-results.sarif'
        continue-on-error: true

  # Build and Test Docker Image (Codeship feature)
  build:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          build-args: |
            PORT=${{ env.PORT }}
            NODE_ENV=production
          tags: ${{ env.DOCKER_IMAGE_NAME }}:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start container and test health
          docker run -d --name test-container \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -e MONGODB_URI=mongodb://host.docker.internal:27017/test \
            ${{ env.DOCKER_IMAGE_NAME }}:test

          # Wait for container to be ready
          sleep 10

          # Test health endpoint
          curl -f http://localhost:3000/health || exit 1

          # Cleanup
          docker stop test-container
          docker rm test-container

  # Staging Deployment (Jenkins/Codeship feature)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          build-args: |
            PORT=${{ env.PORT }}
            NODE_ENV=staging
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:staging
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:staging-${{ github.sha }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Production Deployment (All tools feature)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-app-url.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          build-args: |
            PORT=${{ env.PORT }}
            NODE_ENV=production
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:v${{ github.run_number }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production (placeholder)
        run: |
          echo "Deploy to production server here"
          echo "This could be AWS ECS, Kubernetes, or other deployment target"

      - name: Run post-deployment health checks
        run: |
          echo "Running post-deployment health checks"
          # Add actual health check commands here
          # curl -f https://your-app-url.com/health || exit 1

  # Notification (Jenkins feature)
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [test, security, build, deploy-production]
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          # Add Slack/email notification here

      - name: Notify failure
        if: needs.deploy-production.result == 'failure' || needs.test.result == 'failure'
        run: |
          echo "❌ Build/Deployment failed!"
          # Add Slack/email notification here
