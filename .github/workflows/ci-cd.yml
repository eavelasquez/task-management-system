name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  PORT: 3000
  NODE_ENV: test
  DOCKER_IMAGE_NAME: task-management-system

jobs:
  # Matrix Testing (Travis CI equivalent)
  test:
    name: Test on Node ${{ matrix.node-version }} & MongoDB ${{ matrix.mongodb-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20, 22]
        mongodb-version: ['7.0', '6.0']

    services:
      mongodb:
        image: mongo:${{ matrix.mongodb-version }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand(\"ping\")' || mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Create logs directory
        run: mkdir -p logs

      - name: Install dependencies
        run: npm ci

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in {1..30}; do
            if nc -z localhost 27017; then
              echo "‚úÖ MongoDB is ready!"
              break
            fi
            echo "‚è≥ Waiting for MongoDB... (attempt $i/30)"
            sleep 2
          done

          # Double-check with a simple connection test
          timeout 10 bash -c 'until nc -z localhost 27017; do sleep 1; done' || {
            echo "‚ùå MongoDB failed to start"
            exit 1
          }

      - name: Verify MongoDB connection
        run: |
          # Test MongoDB connection with Mongoose
          node -e "
          const mongoose = require('mongoose');
          mongoose.connect('mongodb://localhost:27017/test')
            .then(() => {
              console.log('‚úÖ MongoDB connection successful');
              return mongoose.connection.db.admin().ping();
            })
            .then(() => {
              console.log('‚úÖ MongoDB ping successful');
              return mongoose.disconnect();
            })
            .then(() => {
              console.log('‚úÖ MongoDB verification complete');
              process.exit(0);
            })
            .catch(err => {
              console.error('‚ùå MongoDB connection failed:', err.message);
              process.exit(1);
            });
          "

      - name: Run linter
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run tests
        run: npm test
        env:
          MONGODB_URI: mongodb://localhost:27017/task-management-system-test
          NODE_ENV: test

      - name: Test application startup
        run: |
          npm start &
          APP_PID=$!
          sleep 10
          node healthcheck.js
          kill $APP_PID || true
        env:
          MONGODB_URI: mongodb://localhost:27017/task-management-system-test
          NODE_ENV: development

      - name: Generate test coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && matrix.node-version == 22 && matrix.mongodb-version == '7.0'
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.mongodb-version }}
          path: |
            logs/
            coverage/
          retention-days: 7

  # Security Analysis (Jenkins/Codeship equivalent)
  security:
    name: Security & Quality Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Audit dependencies
        run: npm audit --audit-level high
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Docker Build & Test
  build:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          build-args: |
            PORT=${{ env.PORT }}
            NODE_ENV=production
          tags: ${{ env.DOCKER_IMAGE_NAME }}:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Create a simple test without depending on external MongoDB
          docker run --rm -d --name test-container \
            -p 3001:3000 \
            -e NODE_ENV=production \
            ${{ env.DOCKER_IMAGE_NAME }}:test

          # Wait a moment for container to start
          sleep 5

          # Simple connectivity test
          if docker ps | grep test-container; then
            echo "‚úÖ Container started successfully"
            docker stop test-container
          else
            echo "‚ùå Container failed to start"
            docker logs test-container || true
            exit 1
          fi

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          build-args: |
            PORT=${{ env.PORT }}
            NODE_ENV=staging
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:staging
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:staging-${{ github.sha }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security, build, deploy-production]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify on success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üöÄ New version deployed: ${{ github.sha }}"
          echo "üì¶ Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:v${{ github.run_number }}"

      - name: Notify on failure
        if: |
          needs.deploy-production.result == 'failure' || 
          needs.test.result == 'failure' || 
          needs.security.result == 'failure' || 
          needs.build.result == 'failure'
        run: |
          echo "‚ùå Pipeline failed!"
          echo "üìù Check the logs for details"
          echo "üîç Failed jobs:"
          echo "  - Tests: ${{ needs.test.result }}"
          echo "  - Security: ${{ needs.security.result }}"
          echo "  - Build: ${{ needs.build.result }}"
          echo "  - Deploy: ${{ needs.deploy-production.result }}"
          exit 1
